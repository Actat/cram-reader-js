class CramReader{constructor(r,e,i,a,t){if(!window.Worker){throw"Web Workers API is needed"}if(!r||!e){throw"Files are Falsy"}this.i=new Cram(r,e,i,a,t);this.t=new Worker("cram-reader-worker.min.js")}getRecords(r,e,i,a,t){if(a){this.t.onmessage=function(r){a(r)}}if(t){this.t.onerror=function(r){t(r)}}this.t.postMessage(this.i,r,e,i)}}class Cram{constructor(r,e,i,a,t){if(!r||!e){throw"Files are Falsy"}this.o=i;this.i=new FileHandler(r,i);this.h=new FileHandler(e,i);this.l=this.v();if(a&&t){this.u=true;var s=new FileHandler(a,i);var n=new FileHandler(t,i);this.m=new Fasta(s,n)}else{this.u=false}this.F=new Map}getRecords(r,e,i){return new Promise(((a,t)=>{var s;var n=new CramHeader(this.i);var o=n.loadChrList().then((e=>{s=e;return e.indexOf(r)})).catch((r=>{t(r)}));var h=[];var l=[];Promise.all([this.l,o]).then((r=>{var a=r[0];var t=r[1];var s=[];a.forEach((r=>{if(r[0]==t&&r[1]<=i&&r[1]+r[2]>=e){var a=this.p(r).then((r=>{var a=this.C(t,e,i,r);h.push(a)}));s.push(a)}}));return s})).then((r=>Promise.all(r).then((()=>{h.forEach((r=>{l=l.concat(r)}));var r=[];l.forEach((e=>{r.push(this.I(s,e))}));return r})).catch((r=>{t(r)})))).then((r=>{Promise.all(r).then((()=>{a(l)})).catch((r=>{t(r)}))})).catch((r=>{t(r)}))}))}v(){return this.h.load().then((r=>{var e=[];var i=new Uint8Array(r);var a;try{var t=new Zlib.Gunzip(i);a=t.decompress()}catch(r){if(r.toString().includes("invalid file signature")){console.log("The crai file may be wrong, or a meddlesome browser may have unzipped it.");a=i}else{console.error(r)}}var s=String.fromCharCode.apply("",a);var n=s.split("\n");n.forEach((r=>{var i=r.split("\t");if(i.length==6){e.push([parseInt(i[0],10),parseInt(i[1],10),parseInt(i[2],10),parseInt(i[3],10),parseInt(i[4],10),parseInt(i[5],10)])}}));return e}))}p(r){var e=this.P(r[3]);var i=e.then((e=>this.R(r,e)));return Promise.all([e,i]).then((r=>{var e=new CramSlice(r[0],r[1]);return e.loadRecords()}))}P(r){return new Promise(((e,i)=>{if(this.F.has(r)){e(this.F.get(r))}var a=new CramDataContainer(this.i,r);this.F.set(r,a);e(a)}))}R(r,e){return e.loadHeaderLength().then((e=>{const i=r[3]+e+r[4];const a=r[5];return this.i.load(i,a)}))}C(r,e,i,a){var t=[];a.forEach((a=>{if(a.refSeqId==r&&a.position<=i&&a.position+a.readLength>=e){t.push(a)}}));return t}async I(r,e){e.refSeqName=r[e.refSeqId];e.restoreCigar();if(this.u){await e.restoreSequence(this.m)}}}
